@page "/"
@using MyApp.Services
@inject AnimeService AnimeService
@inject NavigationManager NavigationManager

<html>
    <head>

    </head>

    <body>
         <h1>Top Anime List</h1>
    <button @onclick="GoToSearch">Search Anime</button>
    <button @onclick="GoToFavorites">Favorites</button>

    @if (animeList == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <ul>
            @foreach (var anime in animeList.Take(100))
            {
                <li>
                    <div class="anime-item">
                        <img src="@anime.Images.Jpg.Image_url" alt="@anime.Title" style="width: 200px; height: 300px;" />
                        <div>
                            <p>@anime.Title</p>
                            <button @onclick="() => ToggleFavorite(anime)" class="heart-btn">
                                @((favoriteIds.Contains(anime.Mal_id) ? "♥" : "♡"))
                            </button>
                        </div>
                    </div>
                </li>

            }
        </ul>
    }

    @code {
        private List<AnimeData> animeList;
        private HashSet<int> favoriteIds;

        protected override async Task OnInitializedAsync()
        {
            animeList = await AnimeService.GetAnimeListAsync();
            favoriteIds = await AnimeService.GetFavoritesAsync();
        }

        private async Task ToggleFavorite(AnimeData anime)
        {
            await AnimeService.ToggleFavoriteAsync(anime.Mal_id);
            if (favoriteIds.Contains(anime.Mal_id))
            {
                favoriteIds.Remove(anime.Mal_id);
            }
            else
            {
                favoriteIds.Add(anime.Mal_id);
            }
            StateHasChanged(); // Refresh the UI to reflect the change
        }

        private void GoToSearch() => NavigationManager.NavigateTo("/search");
        private void GoToFavorites() => NavigationManager.NavigateTo("/favorites");
    }

    </body>
</html>
